The backend for WizCard service:
--------------------------------

Architecture:
=============
        Basic scheme is as follows for now.

            -->  
            --> +----------+        +-----------+        +------+      +-------+                            
            --> | Wiz HTTP | JSON   |Wiz Request|        |Wiz DB| SQL  | MySQL |
            --> |  Server  |<------>|  Server   | <----> |      |<---->|       |        
            --> +----------+        +-----------+        +------+      +-------+                            
            -->                                                                          

	Wiz Request Server should evolve significantly - for now, it hosts a basic
	dispatcher that delegates request processing to appropriate message handler
	from a collection also housed inside the same server.

        The architecture should allow the system to evolve as a multi-tier system 
        - you never know how large  the user base would grow up to. Multi-tier scheme
	and neat decoupling allows for growth. Depending on the scale the functions 
	could be hosted on multiple hardwares or collapsed on to single hardware
	Decoupling should also help with resiliency schemes. (Thoughts must be given
	to reslient architecture from the outset)

Design:
=======                                                                                      
        Intent is to use power of OOD offered by python on need basis. Abstractions
        should be identified and captured in classes and in APIs. Attention should be
	paid to schema design, indexes, algorithms, number and scale of incore data 
	structures - these would impact performance and scale. Provisions should be
	there for troubleshooting and extensive testing. Logging, metering, profiling
	and test framework design should be considered from the outset.

        DB intensive functionality should be pushed to stored procedures - would help
	with performance.
        
        Depending on the user load in future multiple instances of Wiz Req Servers 
        should be spawned in thread containers. The class based design should allow 
        that extension. Decoupling WizDB and Request server allows them to grow 
        independently. 

Code organization:
==================

        django
           |----wizcard
           |      |---- wizcard
           |      |        |----server
           |      |        |----client
           |      |        |----db
           |      |        |----test
                
server:
        main.py and wizreq.|y
        ---------------------
        The code has been organized into two main modules - HTTP server and Wiz Server.
        The Wiz server accepts Wiz requests e.g. register, update etc. The HTTP server
        accepts POST, GET etc. Both server functions are in classes of their own, HTTP
        server being a derivative from imported library while the Wiz server is a new 
        class. The Wiz server implements message handlers (vector of pointers to funcs
         - each function handling a specific request). The Wiz server constructor takes
        a handle to the DB object to be able to perform MySQL operations. There is some 
        exception handling (not a whole lot - scope for significant improvement there). 

        wizutils.py
        -----------
        The wizutils module implements utilities inetrnal to Wiz functions. Logging is
        one of them. Logging is very basic - wizlog() that dumps messages onto console. 
        More utils should be added in future.

        wizdb.py
        -----------
        The wisdb module implements database functions. The module allows you to deal 
        with JSON objects directly (create and fetch). Should include basic insert, 
        delete, query functions. Additionally all wrappers for stored procedures will
        be housed here.

client:
        test.httplib.py
        ---------------
        A simple test client to send and receive JSON objects to Wiz server.

db:
        schema.sql
        ----------
        Implements schema for wizcard service. All table definitions would go in here
        with primary keys and index included. Based on the queries issued by Wiz Ser
        and WizDB appropriate indexes should be built - joint ones or the singletons.

        installdb.sh
        ------------
        A test utility to recreate the schema. (test from scratch)

test:
        This directory should eventually contain the testdb.py, test.data residing
        currently in the server directory. The import path needs to be fixed for that.

        testdb.py
        ---------
        Loads sample test data from JSON file directly into MySQL table.

        test.data
        ---------
        JSON data for a specifc table.

Testing:
========


FAQ:
====
1) How do I create schema?
        cd to db subdirectory.
        edit file installdb.sh to change parameters if needed.
                USER=pranay
                PWD=birdie
                DB=pranay_db
        sh installdb.sh

2) How do I load test data? e.g. User profile cards?
        cd to server directory.

        Usage: python testdb.py <filename> <tablename>
        python testdb.py test.data wiz_card_user
        
        Using this script you may create test data for any table.
        
3) How do I start the server?
        Usage: python wizserver.py <port>
               python main.py 8003

4) How do I start the client?
        cd to client subdirectory. server must be running already.
        python test.httlib.py 

